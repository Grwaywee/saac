import Foundation
import CloudKit

class AttendanceViewModel: ObservableObject {
    @Published var sessions: [WorkSession] = []
    private let database = CKContainer.default().publicCloudDatabase

    //MARK: - üîπ ÌäπÏ†ï ÏÇ¨Ïö©ÏûêÏùò WorkSession Í∏∞Î°ùÏùÑ Í∞ÄÏ†∏Ïò§Îäî Ìï®Ïàò
    func fetchUserSessions(userRecord: CKRecord) {
        let userReference = CKRecord.Reference(recordID: userRecord.recordID, action: .none)
        let predicate = NSPredicate(format: "userReference == %@", userReference)
        let query = CKQuery(recordType: "worksession", predicate: predicate)

        let operation = CKQueryOperation(query: query)
        operation.resultsLimit = CKQueryOperation.maximumResults

        operation.recordMatchedBlock = { _, result in
            switch result {
            case .success(let record):
                if let session = WorkSession(from: record) {
                    DispatchQueue.main.async {
                        if !self.sessions.contains(where: { $0.id == session.id }) {
                            self.sessions.append(session)
                        }
                    }
                }
            case .failure(let error):
                print("‚ùå [fetchUserSessions] ÏÇ¨Ïö©Ïûê ÏÑ∏ÏÖò Î∂àÎü¨Ïò§Í∏∞ Ïò§Î•ò: \(error.localizedDescription)")
            }
        }

        database.add(operation)
    }

    //MARK: - ‚úÖ Ï∂úÍ∑º Í∏∞Î°ù (Users Î†àÏΩîÎìú Ï∞∏Ï°∞ Ï∂îÍ∞Ä)
    func checkIn(userRecord: CKRecord, workOption: String) {
        print("\n----------Main WorkSession ÏÉùÏÑ±----------AttendanceViewModel----------\n")
        let userReference = CKRecord.Reference(recordID: userRecord.recordID, action: .none)
        
        guard let userName = userRecord["userName"] as? String else {
            print("‚ùå [checkIn] ÏÇ¨Ïö©Ïûê Ïù¥Î¶Ñ ÏóÜÏùå")
            return
        }
        
        let newSession = WorkSession(
            id: UUID().uuidString,
            date: Date(),
            userReference: userReference,
            userName: userName,
            workOption: workOption,
            checkInTime: Date(),
            checkOutTime: nil,
            breaks: [],
            lastUpdated: Date(),
            coreStartTime: nil,
            coreEndTime: nil,
            note: nil // optional ÌÖçÏä§Ìä∏ ÌïÑÎìú
        )
        
        let record = newSession.toRecord()
        database.save(record) { savedRecord, error in
            if let error = error {
                print("‚ùå [checkIn] Ï∂úÍ∑º Í∏∞Î°ù Ï†ÄÏû• Ïã§Ìå®: \(error.localizedDescription)")
                print("----------Ïù¥ÏÉÅ ÎÅù----------AttendanceViewModel----------")
                return
            }
            if let savedRecord = savedRecord, let savedSession = WorkSession(from: savedRecord) {
                DispatchQueue.main.async {
                    self.sessions.append(savedSession)
                    print("‚úÖ [checkIn] Ï∂úÍ∑º Í∏∞Î°ù ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ï†ÄÏû•Îê®")
                    print("----------Ïù¥ÏÉÅ ÎÅù----------AttendanceViewModel----------")
                }
            }
        }
    }

    //MARK: - ‚úÖ Ìá¥Í∑º Í∏∞Î°ù
    func checkOut(session: WorkSession? = nil, userRecord: CKRecord? = nil, workOption: String? = nil) {
        if let session = session {
            // Í∏∞Ï°¥ Î∞©Ïãù
            guard let index = sessions.firstIndex(where: { $0.id == session.id }) else { return }
            sessions[index].checkOutTime = Date()
            sessions[index].lastUpdated = Date()
            
            print("\n----------Main WorkSession ÎßàÎ¨¥Î¶¨----------AttendanceViewModel----------\n")

            let record = sessions[index].toRecord()
            database.save(record) { savedRecord, error in
                if let error = error {
                    print("‚ùå [checkOut] Ìá¥Í∑º Í∏∞Î°ù Ï†ÄÏû• Ïã§Ìå®: \(error.localizedDescription)")
                    print("----------Ïù¥ÏÉÅ ÎÅù----------AttendanceViewModel----------")
                    return
                }
                print("‚úÖ [checkOut] Ìá¥Í∑º Í∏∞Î°ù ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ï†ÄÏû•Îê®")
                print("----------Ïù¥ÏÉÅ ÎÅù----------AttendanceViewModel----------")
            }
        } else if let userRecord = userRecord, let workOption = workOption {
            let userReference = CKRecord.Reference(recordID: userRecord.recordID, action: .none)
            let today = Date()
            if let match = sessions.first(where: {
                $0.userReference.recordID == userReference.recordID &&
                Calendar.current.isDate($0.date, inSameDayAs: today) &&
                $0.workOption == workOption &&
                $0.checkOutTime == nil
            }) {
                checkOut(session: match)
            } else {
                print("‚ö†Ô∏è [checkOut] Ïò§Îäò ÎÇ†ÏßúÏóê ÎßûÎäî Ìá¥Í∑º Í∞ÄÎä•Ìïú ÏÑ∏ÏÖòÏùÑ Ï∞æÏßÄ Î™ªÌñàÏäµÎãàÎã§.")
                print("----------Ïù¥ÏÉÅ ÎÅù----------AttendanceViewModel----------")
            }
        } else {
            print("‚ùå [checkOut] session ÎòêÎäî userRecord + workOption Îëò Ï§ë ÌïòÎÇòÎäî Î∞òÎìúÏãú ÌïÑÏöîÌï©ÎãàÎã§.")
            print("----------Ïù¥ÏÉÅ ÎÅù----------AttendanceViewModel----------")
        }
    }

    //MARK: - üóë ÏÇ¨Ïö©Ïûê ÌÉàÌá¥ Ï≤òÎ¶¨ (ÏÇ¨Ïö©Ïûê Î†àÏΩîÎìú + Î™®Îì† WorkSession ÏÇ≠Ï†ú)
    func deleteUserData(userRecord: CKRecord, completion: @escaping (Bool) -> Void) {
        let userReference = CKRecord.Reference(recordID: userRecord.recordID, action: .none)
        let sessionPredicate = NSPredicate(format: "userReference == %@", userReference)
        let sessionQuery = CKQuery(recordType: "worksession", predicate: sessionPredicate)

        // Step 1: Fetch all sessions for this user
        self.database.perform(sessionQuery, inZoneWith: nil) { results, error in
            if let error = error {
                print("‚ùå ÏÇ¨Ïö©Ïûê ÏÑ∏ÏÖò Ï°∞Ìöå Ïã§Ìå®: \(error.localizedDescription)")
                completion(false)
                return
            }

            var recordsToDelete = results?.map { $0.recordID } ?? []

            // Step 2: Add the user record itself
            recordsToDelete.append(userRecord.recordID)

            // Step 3: Batch delete
            let deleteOperation = CKModifyRecordsOperation(recordsToSave: nil, recordIDsToDelete: recordsToDelete)
            deleteOperation.modifyRecordsResultBlock = { result in
                switch result {
                case .success:
                    print("‚úÖ ÏÇ¨Ïö©Ïûê Î∞è ÏÑ∏ÏÖò Ï†ÑÎ∂Ä ÏÇ≠Ï†ú ÏôÑÎ£å")
                    DispatchQueue.main.async {
                        self.sessions.removeAll()
                        completion(true)
                    }
                case .failure(let error):
                    print("‚ùå ÏÇ¨Ïö©Ïûê Î∞è ÏÑ∏ÏÖò ÏÇ≠Ï†ú Ïã§Ìå®: \(error.localizedDescription)")
                    completion(false)
                }
            }
            self.database.add(deleteOperation)
        }
    }
}
